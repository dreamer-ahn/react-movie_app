{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movice","react_default","a","createElement","className","src","this","props","poster","alt","title","genres","map","genre","index","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","medium_cover_image","_getMovies","_callee","_movies","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAyCeA,0LA1BP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,IAAKC,KAAKC,MAAMC,OAAQC,IAAKH,KAAKC,MAAMG,SAE3ET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,UAAKG,KAAKC,MAAMG,OAChBT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVE,KAAKC,MAAMI,OAAOC,IAAI,SAACC,EAAOC,GAAR,OAAkBb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeW,IAAKD,GAAQD,MAEzFZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAMX,KAAKC,MAAMW,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,sBA1BfC,cCwJNC,6MAvDbC,MAAQ,KAgBRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOhB,IAAI,SAACiB,EAAOf,GAE3C,OADAgB,QAAQC,IAAIF,GACJ5B,EAAAC,EAAAC,cAAC6B,EAAD,CACEtB,MAAOmB,EAAMnB,MACbF,OAAQqB,EAAMI,mBACdtB,OAAQkB,EAAMlB,OACdO,SAAUW,EAAMX,SAChBH,IAAKD,SAMpBoB,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYd,EAAKe,WADjB,OACJN,EADIG,EAAAI,KAEVhB,EAAKiB,SAAS,CACZhB,OAAQQ,IAHA,wBAAAG,EAAAM,SAAAV,QAOZO,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,0FAjCxBtB,QAAQC,IAAI,yDAIZD,QAAQC,IAAI,YACZzB,KAAK4B,8CAgCPJ,QAAQC,IAAI,UADL,IAECH,EAAWtB,KAAKmB,MAAhBG,OACR,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAC9BA,EAAStB,KAAKoB,gBAAkB,oBAnDvBH,aCxFE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.2d503bf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\nclass Movice extends Component{\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        poster: PropTypes.string.isRequired,\n        genres: PropTypes.array.isRequired,\n        synopsis: PropTypes.string.isRequired\n    }\n\n\n    render() {\n        return (\n            <div className=\"Movie\">\n                <div className=\"Movie__Column\">\n                    <img className=\"Movie__Poster\" src={this.props.poster} alt={this.props.title} />\n                </div>\n                <div className=\"Movie__Column\">\n                    <h1>{this.props.title}</h1>\n                    <div className=\"Movie__Genres\">\n                        {this.props.genres.map((genre, index) => <span className=\"Movie__Genre\" key={index}>{genre}</span>)}\n                    </div>\n                    <div className=\"Movie__Synopsis\">\n                        <LinesEllipsis\n                            text={this.props.synopsis}\n                            maxLine='3'\n                            ellipsis='...'\n                            trimRight\n                            basedOn='letters'\n                            />\n                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Movice;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// const movies = [\n//   {\n//     title: \"퍼스트 어벤져\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20111223_44%2F1324635585945KDOJ5_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"캡틴마블\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20190225_72%2F1551069530582h2huX_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"아이언맨1\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20111222_37%2F1324501632182vbSoY_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"아이언맨2\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20111223_163%2F1324610044306xOc34_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n\n//   {\n//     title: \"인크레더블 헐크\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20111222_21%2F1324529563793t6TEo_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"토르: 천둥의 신\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20111223_276%2F1324635844036eo9sS_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"어벤져스\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20120426_172%2F1335428116411i030K_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"아이언맨3\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20130311_165%2F13629835475487aDfz_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n\n//   {\n//     title: \"토르: 다크월드\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20130930_95%2F1380517012698Dpvj5_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"캡틴 아메리카: 윈터 솔져\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20140320_56%2F1395301906218FkBsV_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"가디언 오브 갤럭시\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20170811_107%2F1502432301446njv93_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"가디언 오브 갤럭시 VOL.2\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20170329_6%2F1490752948552vH5G8_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n\n//   {\n//     title: \"어벤져스: 에이지 오브 울트론\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20150324_33%2F1427159150181p9uQM_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"앤트맨\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20150723_140%2F1437613988558Y8rfz_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"캡틴 아메리카: 시빌 워\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20160427_273%2F1461725031863moaJw_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"스파이더맨: 홈커밍\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20170524_188%2F1495610958516Vt5jr_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n\n//   {\n//     title: \"닥터 스트레인지\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20161014_50%2F147640824152266AVn_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"블랙 팬서\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20180103_128%2F1514946690065uYxwW_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"토르: 라그나로크\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20170928_85%2F1506564710105ua5fS_PNG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"어벤져스: 인피니티 워\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20180322_242%2F15216962441485x5Om_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n\n//   {\n//     title: \"앤트맨과 와스프\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20180530_170%2F1527645793223uhWgz_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n//   {\n//     title: \"어벤져스: 엔드게임\",\n//     poster: \"https://search.pstatic.net/common?type=o&size=120x171&quality=100&direct=true&src=https%3A%2F%2Fs.pstatic.net%2Fmovie.phinf%2F20190417_250%2F1555465284425i6WQE_JPEG%2Fmovie_image.jpg%3Ftype%3Dw640_2\",\n//   },\n// ];\n\nclass App extends Component{\n\n  state = {\n  }\n\n  // Render : componentWillMount() -> render() -> componentDidMount()\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> cocmponentWillUpdate() -> render() -> componentDidUpdate();\n  // 업데이트는 setState 가 동작할 때 발생한다.\n    \n  componentWillMount() {\n      console.log('WillMount');\n  }\n\n  componentDidMount() {\n      console.log('DidMount');\n      this._getMovies();\n  }\n  \n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      console.log(movie);\n      return (<Movie\n                title={movie.title} \n                poster={movie.medium_cover_image} \n                genres={movie.genres} \n                synopsis={movie.synopsis} \n                key={index}\n              ></Movie>);\n    });\n    return movies;\n  }\n\n _getMovies = async () => {\n    const _movies = await this._callApi();\n    this.setState({\n      movies: _movies\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(res => res.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  }\n\n  render() {\n    console.log('render');\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading..' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}